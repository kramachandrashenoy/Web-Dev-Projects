Question:
Implement a file to save the student data to a file in csv format using the $_files to handle the operations

To implement a PHP script that allows users to upload a CSV file and save the student data to a database, you'll need to follow these steps:

1. **Create an HTML form for file upload**.
2. **Create a PHP script to handle the file upload and save the data to the database**.

### Step 1: Create an HTML Form for File Upload

Create a file named `upload_form.html` with the following content:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Upload CSV File</title>
</head>
<body>
    <h1>Upload CSV File</h1>
    <form action="upload.php" method="POST" enctype="multipart/form-data">
        <label for="file">Choose CSV File:</label>
        <input type="file" name="file" id="file" accept=".csv" required>
        <br><br>
        <input type="submit" name="submit" value="Upload">
    </form>
</body>
</html>
```

### Step 2: Create a PHP Script to Handle the File Upload and Save Data

Create a file named `upload.php` with the following content:

```php
<?php
// Database connection parameters
$servername = "localhost";
$username = "root"; // Use your MySQL username
$password = ""; // Use your MySQL password
$dbname = "school";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

if (isset($_POST['submit'])) {
    // Check if file was uploaded without errors
    if (isset($_FILES["file"]) && $_FILES["file"]["error"] == 0) {
        $filename = $_FILES["file"]["name"];
        $filetype = $_FILES["file"]["type"];
        $filesize = $_FILES["file"]["size"];
        
        // Verify file extension
        $ext = pathinfo($filename, PATHINFO_EXTENSION);
        if ($ext == "csv") {
            // Open uploaded CSV file with read-only mode
            $csvFile = fopen($_FILES['file']['tmp_name'], 'r');
            
            // Skip the first line
            fgetcsv($csvFile);
            
            // Parse data from CSV file line by line
            while (($line = fgetcsv($csvFile)) !== FALSE) {
                // Get data
                $firstName = $line[0];
                $lastName = $line[1];
                $cgpa = $line[2];
                
                // Insert data into database
                $sql = "INSERT INTO students (first_name, last_name, cgpa) VALUES ('$firstName', '$lastName', '$cgpa')";
                $conn->query($sql);
            }
            
            // Close opened CSV file
            fclose($csvFile);
            
            echo "CSV file has been successfully imported.";
        } else {
            echo "Error: Please upload a valid CSV file.";
        }
    } else {
        echo "Error: " . $_FILES["file"]["error"];
    }
}

// Close the connection
$conn->close();
?>
```

### Explanation

1. **HTML Form**:
    - The form in `upload_form.html` allows users to upload a CSV file. The form uses `POST` method and `multipart/form-data` encoding type to handle file uploads.

2. **PHP Script** (`upload.php`):
    - The script connects to the MySQL database.
    - It checks if the form is submitted and a file is uploaded without errors.
    - It verifies the file extension to ensure it is a CSV file.
    - It opens the uploaded CSV file and reads it line by line.
    - For each line, it extracts the student's first name, last name, and CGPA, and inserts this data into the `students` table in the database.
    - It handles errors and outputs appropriate messages.

3. **Database Insertion**:
    - Each student's data from the CSV file is inserted into the `students` table using an SQL `INSERT` statement.

### CSV File Format

The CSV file should have the following format:

```csv
first_name,last_name,cgpa
John,Doe,3.5
Jane,Smith,3.8
Alice,Johnson,3.2
```

### Running the Script

1. **Set up the database**: Ensure your MySQL database and table are set up as described previously.
2. **Upload form**: Open `upload_form.html` in your web browser, choose a CSV file formatted as shown above, and submit the form.
3. **Processing**: The `upload.php` script processes the uploaded file and inserts the data into the database.

This setup allows you to upload a CSV file containing student data and save it to your MySQL database.
